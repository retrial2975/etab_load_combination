import streamlit as st
import pandas as pd
import numpy as np
import re

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ---
# (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô calculate_combinations ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
def calculate_combinations(df, custom_story_name=None):
    value_cols = ['P', 'V2', 'V3', 'T', 'M2', 'M3']
    group_cols = ['Story', 'Column', 'Unique Name', 'Station']
    
    if custom_story_name:
        df['Story'] = custom_story_name
        
    pivot_df = df.pivot_table(index=group_cols, columns='Output Case', values=value_cols, fill_value=0)
    pivot_df.columns = ['_'.join(map(str, col)).strip() for col in pivot_df.columns.values]
    pivot_df.reset_index(inplace=True)

    required_cases = ['Dead', 'SDL', 'Live', 'EX', 'EY']
    for case in required_cases:
        for val in value_cols:
            col_name = f'{val}_{case}'
            if col_name not in pivot_df.columns:
                pivot_df[col_name] = 0

    combo_dfs = {}
    
    combinations = {
        'U01': {'Dead': 1.4, 'SDL': 1.4, 'Live': 1.7, 'EX': 0, 'EY': 0},
        'U02': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': 1, 'EY': 0},
        'U03': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': -1, 'EY': 0},
        'U04': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': 0, 'EY': 1},
        'U05': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': 0, 'EY': -1},
        'U06': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': 1, 'EY': 0},
        'U07': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': -1, 'EY': 0},
        'U08': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': 0, 'EY': 1},
        'U09': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': 0, 'EY': -1},
    }

    for name, factors in combinations.items():
        temp_df = pivot_df[group_cols].copy()
        temp_df['Output Case'] = name
        for val in value_cols:
            ex_factor = factors['EX']
            ey_factor = factors['EY']
            if val in ['V2', 'V3']:
                ex_factor *= 2.5
                ey_factor *= 2.5

            temp_df[val] = (factors['Dead'] * pivot_df[f'{val}_Dead'] +
                            factors['SDL'] * pivot_df[f'{val}_SDL'] +
                            factors['Live'] * pivot_df[f'{val}_Live'] +
                            ex_factor * pivot_df[f'{val}_EX'] +
                            ey_factor * pivot_df[f'{val}_EY'])
        combo_dfs[name] = temp_df

    result_df = pd.concat(combo_dfs.values(), ignore_index=True)
    
    for col in value_cols:
        result_df[col] = result_df[col].round(4)
        
    final_cols = group_cols + ['Output Case'] + value_cols
    result_df = result_df[final_cols]
    return result_df

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit ---

st.set_page_config(layout="wide")
st.title('‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combination üèóÔ∏è')

st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `load.csv` ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combination")

# <<<<<<<<<<<<<<<<<<<< ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î <<<<<<<<<<<<<<<<<<<<
st.info(
    """
    **‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
    - **`Story`**: ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    - **`Column`**: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏≤
    - **`Unique Name`**: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    - **`Station`**: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    - **`Output Case`**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÅ‡∏£‡∏á (‡πÄ‡∏ä‡πà‡∏ô Dead, Live, SDL, EX, EY)
    - **`P`, `V2`, `V3`, `T`, `M2`, `M3`**: ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡πÅ‡∏Å‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
    """
)
# <<<<<<<<<<<<<<<<<<<< ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <<<<<<<<<<<<<<<<<<<<

uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå load.csv", type=['csv'])

if uploaded_file is not None:
    try:
        input_df = pd.read_csv(uploaded_file)
        st.success("‚úîÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        
        # (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
        if 'main_result_df' not in st.session_state:
            st.session_state.main_result_df = None
        if 'ug_result_df' not in st.session_state:
            st.session_state.ug_result_df = None

        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)")
        st.dataframe(input_df.head())

        st.header("1. ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combinations (U01 - U09)")
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combinations... ‚è≥'):
            st.session_state.main_result_df = calculate_combinations(input_df.copy())
        
        st.success("‚úîÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

        st.header("2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô (Underground Floor)")
        stories = sorted(input_df['Story'].unique())
        base_story = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Story'):",
            options=stories
        )

        st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì (Factor) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô:")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            factor_dead_str = st.text_input("Factor for Dead Load", value="1.0")
        with col2:
            factor_sdl_str = st.text_input("Factor for SDL", value="1.0")
        with col3:
            factor_live_str = st.text_input("Factor for Live Load", value="1.0")

        merge_results = st.checkbox("‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å")

        if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô", type="primary"):
            pattern = re.compile(r"^\d+(\.\d{1,2})?$")
            is_valid = pattern.match(factor_dead_str) and pattern.match(factor_sdl_str) and pattern.match(factor_live_str)

            if is_valid:
                factor_dead = float(factor_dead_str)
                factor_sdl = float(factor_sdl_str)
                factor_live = float(factor_live_str)
                
                with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô... ‚è≥'):
                    base_floor_df = input_df[input_df['Story'] == base_story].copy()
                    value_cols_ug = ['P', 'V2', 'V3', 'T', 'M2', 'M3']
                    factors_map = {'Dead': factor_dead, 'SDL': factor_sdl, 'Live': factor_live}

                    def apply_factors(row):
                        case = row['Output Case']
                        if case in factors_map:
                            row[value_cols_ug] *= factors_map[case]
                        return row

                    ug_df_raw = base_floor_df.apply(apply_factors, axis=1)
                    st.session_state.ug_result_df = calculate_combinations(ug_df_raw, custom_story_name="Underground")
                    st.success("‚úîÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            else:
                st.error("üö® ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô 1.25)")
                st.session_state.ug_result_df = None 
        
        st.divider()
        st.header("3. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        final_df_to_display = st.session_state.main_result_df.copy() if st.session_state.main_result_df is not None else None

        if merge_results and st.session_state.ug_result_df is not None:
            final_df_to_display = pd.concat([st.session_state.main_result_df, st.session_state.ug_result_df], ignore_index=True)
            st.info("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å **‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö** ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô")
            file_name = "load_combinations_combined_result.csv"
        else:
            st.info("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô, ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡πä‡∏Å ‚úîÔ∏è ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)")
            if st.session_state.ug_result_df is not None:
                st.write("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô (‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô)")
                st.dataframe(st.session_state.ug_result_df)
            file_name = "load_combinations_result.csv"

        st.dataframe(final_df_to_display)

        @st.cache_data
        def convert_df_to_csv(df):
            return df.to_csv(index=False).encode('utf-8')
        
        if final_df_to_display is not None:
            csv_output = convert_df_to_csv(final_df_to_display)
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô CSV",
                data=csv_output,
                file_name=file_name,
                mime='text/csv',
            )
            
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {e}")
