import streamlit as st
import pandas as pd
import numpy as np

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ---

def calculate_combinations(df, custom_story_name=None):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combination ‡∏à‡∏≤‡∏Å DataFrame ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    - df: DataFrame ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    - custom_story_name: ‡∏ä‡∏∑‡πà‡∏≠ Story ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏Å‡∏£‡∏ì‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô)
    """
    value_cols = ['P', 'V2', 'V3', 'T', 'M2', 'M3']
    group_cols = ['Story', 'Column', 'Unique Name', 'Station']
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ Story ‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡πâ‡∏ô
    # ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Story ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Group Key ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    if custom_story_name:
        df['Original_Story_for_UG'] = df['Story']
        df['Story'] = custom_story_name
        
    pivot_df = df.pivot_table(index=group_cols, columns='Output Case', values=value_cols, fill_value=0)
    pivot_df.columns = ['_'.join(map(str, col)).strip() for col in pivot_df.columns.values]
    pivot_df.reset_index(inplace=True)

    required_cases = ['Dead', 'SDL', 'Live', 'EX', 'EY']
    for case in required_cases:
        for val in value_cols:
            col_name = f'{val}_{case}'
            if col_name not in pivot_df.columns:
                pivot_df[col_name] = 0

    combo_dfs = {}
    
    # --- ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ---
    combinations = {
        'U01': {'Dead': 1.4, 'SDL': 1.4, 'Live': 1.7, 'EX': 0, 'EY': 0},
        'U02': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': 1, 'EY': 0},
        'U03': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': -1, 'EY': 0},
        'U04': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': 0, 'EY': 1},
        'U05': {'Dead': 1.05, 'SDL': 1.05, 'Live': 1.275, 'EX': 0, 'EY': -1},
        'U06': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': 1, 'EY': 0},
        'U07': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': -1, 'EY': 0},
        'U08': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': 0, 'EY': 1},
        'U09': {'Dead': 0.9, 'SDL': 0.9, 'Live': 0, 'EX': 0, 'EY': -1},
    }

    for name, factors in combinations.items():
        temp_df = pivot_df[group_cols].copy()
        temp_df['Output Case'] = name
        for val in value_cols:
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô V2 ‡∏´‡∏£‡∏∑‡∏≠ V3 ‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì EX, EY ‡∏î‡πâ‡∏ß‡∏¢ 2.5
            ex_factor = factors['EX']
            ey_factor = factors['EY']
            if val in ['V2', 'V3']:
                ex_factor *= 2.5
                ey_factor *= 2.5

            temp_df[val] = (factors['Dead'] * pivot_df[f'{val}_Dead'] +
                            factors['SDL'] * pivot_df[f'{val}_SDL'] +
                            factors['Live'] * pivot_df[f'{val}_Live'] +
                            ex_factor * pivot_df[f'{val}_EX'] +
                            ey_factor * pivot_df[f'{val}_EY'])
        combo_dfs[name] = temp_df

    result_df = pd.concat(combo_dfs.values(), ignore_index=True)
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 4 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    for col in value_cols:
        result_df[col] = result_df[col].round(4)
        
    final_cols = group_cols + ['Output Case'] + value_cols
    result_df = result_df[final_cols]
    return result_df

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit ---

st.set_page_config(layout="wide")
st.title('‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combination üèóÔ∏è')

st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `load.csv` ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combination")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå load.csv", type=['csv'])

if uploaded_file is not None:
    try:
        input_df = pd.read_csv(uploaded_file)
        st.success("‚úîÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)")
        st.dataframe(input_df.head())

        # --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏•‡∏±‡∏Å ---
        st.header("1. ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combinations (U01 - U09)")
        with st.expander("‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
            st.markdown("""
            - **U01** = `1.4*Dead + 1.4*SDL + 1.7*Live`
            - **U02** = `1.05*Dead + 1.05*SDL + 1.275*Live + EX`
            - **U03** = `1.05*Dead + 1.05*SDL + 1.275*Live - EX`
            - **U04** = `1.05*Dead + 1.05*SDL + 1.275*Live + EY`
            - **U05** = `1.05*Dead + 1.05*SDL + 1.275*Live - EY`
            - **U06** = `0.9*Dead + 0.9*SDL + EX`
            - **U07** = `0.9*Dead + 0.9*SDL - EX`
            - **U08** = `0.9*Dead + 0.9*SDL + EY`
            - **U09** = `0.9*Dead + 0.9*SDL - EY`
            - **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ `V2` ‡πÅ‡∏•‡∏∞ `V3` ‡πÄ‡∏ó‡∏≠‡∏° `EX` ‡πÅ‡∏•‡∏∞ `EY` ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ **2.5**
            """)

        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Load Combinations... ‚è≥'):
            main_result_df = calculate_combinations(input_df.copy())
        
        st.success("‚úîÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        st.dataframe(main_result_df)

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        @st.cache_data
        def convert_df_to_csv(df):
            return df.to_csv(index=False).encode('utf-8')

        csv_main_output = convert_df_to_csv(main_result_df)
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV",
            data=csv_main_output,
            file_name='load_combinations_result.csv',
            mime='text/csv',
        )
        
        st.divider()

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô ---
        st.header("2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô (Underground Floor)")

        # <<<<<<<<<<<<<<<<<<<< ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <<<<<<<<<<<<<<<<<<<<
        stories = sorted(input_df['Story'].unique())
        base_story = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Story'):",
            options=stories
        )
        # <<<<<<<<<<<<<<<<<<<< ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <<<<<<<<<<<<<<<<<<<<

        st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì (Factor) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô:")
        col1, col2, col3 = st.columns(3)
        with col1:
            factor_dead = st.number_input("Factor for Dead Load", min_value=0.0, value=1.0, step=0.1)
        with col2:
            factor_sdl = st.number_input("Factor for SDL", min_value=0.0, value=1.0, step=0.1)
        with col3:
            factor_live = st.number_input("Factor for Live Load", min_value=0.0, value=1.0, step=0.1)

        if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô", type="primary"):
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô... ‚è≥'):
                # <<<<<<<<<<<<<<<<<<<< ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <<<<<<<<<<<<<<<<<<<<
                # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô
                base_floor_df = input_df[input_df['Story'] == base_story].copy()
                # <<<<<<<<<<<<<<<<<<<< ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <<<<<<<<<<<<<<<<<<<<
                
                value_cols_ug = ['P', 'V2', 'V3', 'T', 'M2', 'M3']
                
                factors_map = {
                    'Dead': factor_dead,
                    'SDL': factor_sdl,
                    'Live': factor_live
                }

                def apply_factors(row):
                    case = row['Output Case']
                    if case in factors_map:
                        row[value_cols_ug] *= factors_map[case]
                    return row

                ug_df_raw = base_floor_df.apply(apply_factors, axis=1)

                st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Load Combinations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô")
                # <<<<<<<<<<<<<<<<<<<< ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <<<<<<<<<<<<<<<<<<<<
                st.write(f"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πâ‡∏ô `{base_story}` ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Story ‡πÄ‡∏õ‡πá‡∏ô `Underground`")
                
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏π‡∏ì factor ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì combinations
                ug_result_df = calculate_combinations(ug_df_raw, custom_story_name="Underground")
                st.dataframe(ug_result_df)

                # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô
                csv_ug_output = convert_df_to_csv(ug_result_df)
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô CSV",
                    data=csv_ug_output,
                    file_name=f'underground_combinations_from_{base_story.replace(" ", "_")}.csv',
                    mime='text/csv',
                    key='download_ug'
                )
                # <<<<<<<<<<<<<<<<<<<< ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <<<<<<<<<<<<<<<<<<<<

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {e}")
